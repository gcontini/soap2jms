<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Soap To JMS</title>
		<author>Gabriele Contini</author>
		<date>2016-10-05</date>
	</properties>
	<body>
		<section name="Soap -> JMS">
			<p>
				The methods are "repeatable" (idempotent), if
						the client is properly coded it can guarantee message delivery.
			</p>
			<subsection name="Features">
				<p>
					Main features of this library are:
				</p>
				<ul>
					<li>It allows to read messages from a JMS queue using a SOAP over
						HTTP web service.
					</li>
					<li>It allows to send messages to a JMS queue.
					</li>
					<li>It is reliable. The methods are "repeatable" (idempotent), if
						the client is properly coded
						it can acheive
						See the design section for more information.
					</li>
				</ul>
				<p>
					Clients don't have to depend on any JMS implementation libraries.
					They are simple JAX-WS web service clients, that can be supported
					by any JAX-WS implementation
					(Any J2EE container or Apache CXF if
					you
					are in a standalone application).
				</p>
				<p>
					It is not to be confused with "Soap over JMS".
					Soap Over JMS
					encapsulates a soap message into a JMS envelope.
					It has the same
					problems of JMS in terms of interoperability and it
					requires a JMS
					client implementation to connect to the server. In other words the
					client must have the JMS client libraries of the right version (eg.
					"jboss-client.jar")
				</p>
			</subsection>
			<subsection name="Requirements">
				<p>Server requirements:</p>
				<ul>
					<li>Java 7/8</li>
					<li>Jms 2.0, CDI (JavaEE 6)</li>
					<li>Currently tested in wildfly 10. Any JavaEE 6 container should
						be supported.</li>
				</ul>
				<p>In order to use the pre-built client</p>
				<ul>
					<li>Java 7/8</li>
					<li>Any JAX-WS implementation (Apache CXF).</li>
				</ul>
				Clients that doesn't fulfill the requirements (eg. Axis or .NET)
				must implement a client starting from the wsdl.
			</subsection>
			<subsection name="What's next?">
				<p>Have a 5 minutes tour of the features:</p>
				<ul>
					<li>
						Read the introduction on how to
						<a href="OutputStream_to_InputStream.html">
							'convert' an OutputStream into an
							InputStream
						</a>
						.
					</li>
					<li>
						Have a quick look at the
						<a href="user_guide/user_guide.html">user guide</a>
						, to have an overview of all the functions.
					</li>
					<li>
						Learn how to
						<a href="install.html">add the library</a>
						to your project.
					</li>
					<li>
						Post your doubts on the
						<a href="http://sourceforge.net/p/io-tools/easystream/discussion">
							users forum
						</a>
						. We will be glad to help you, and to answer your questions!
						The
						forum is moderated, and it has very few messages per year.
						(Please
						don't contact project administrators on private
						email, your doubts
						might be useful to other users.)
					</li>
					<li>Tell us your ideas. We're ready to implement them!
					</li>
					<li>
						Show us your appreciation! Like us on Google+, write a
						positive
						<a
							href="http://sourceforge.net/projects/easystream.io-tools.p/reviews/new">
							review on SourceForge
						</a>
						, give us feedbacks.
					</li>
				</ul>
			</subsection>
		</section>
	</body>
</document>

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.github.soap2jms.reader;

import java.util.logging.Logger;

import javax.jms.QueueConnection;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-09-18T11:20:50.051+08:00
 * Generated source version: 3.1.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "jmsReaderSoap",
                      portName = "readerSOAP",
                      targetNamespace = "http://soap2jms.github.com/reader",
                      wsdlLocation = "file:/usr/local/prj/misc/workspace/test/reader_common/src/main/resources/queueReader.wsdl",
                      endpointInterface = "com.github.soap2jms.reader.ReaderSoap2JmsGithubCom")
                      
public class ReaderSOAPImpl implements ReaderSoap2JmsGithubCom {

    private static final Logger LOG = Logger.getLogger(ReaderSOAPImpl.class.getName());
    
    private QueueConnection qc;
    /* (non-Javadoc)
     * @see com.github.soap2jms.reader.ReaderSoap2JmsGithubCom#retrieveMessages(java.lang.String filter, int maxItems)*
     */
    public com.github.soap2jms.reader_common.RetrieveMessageResponseType retrieveMessages(java.lang.String filter, int maxItems) { 
        LOG.info("Executing operation retrieveMessages");
        System.out.println(filter);
        System.out.println(maxItems);
        try {
            com.github.soap2jms.reader_common.RetrieveMessageResponseType _return = new com.github.soap2jms.reader_common.RetrieveMessageResponseType();
            java.util.List<com.github.soap2jms.reader_common.JmsMessage> _returnJmsMessages = new java.util.ArrayList<com.github.soap2jms.reader_common.JmsMessage>();
            com.github.soap2jms.reader_common.JmsMessage _returnJmsMessagesVal1 = new com.github.soap2jms.reader_common.JmsMessage();
            _returnJmsMessagesVal1.setMessageId("MessageId-922790541");
            _returnJmsMessagesVal1.setTimestamp(725349799);
            _returnJmsMessagesVal1.setType("Type448031970");
            _returnJmsMessagesVal1.setCorrelationId("CorrelationId-892449374");
            _returnJmsMessagesVal1.setMessageType("MessageType-960763367");
            byte[] _returnJmsMessagesVal1Body = new byte[] {};
            _returnJmsMessagesVal1.setBody(_returnJmsMessagesVal1Body);
            _returnJmsMessages.add(_returnJmsMessagesVal1);
            _return.getJmsMessages().addAll(_returnJmsMessages);
            _return.setComplete(false);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see com.github.soap2jms.reader.ReaderSoap2JmsGithubCom#acknowledgeMessages(java.util.List<java.lang.String> messageId)*
     */
    public java.util.List<com.github.soap2jms.reader_common.MessageIdAndStatus> acknowledgeMessages(java.util.List<java.lang.String> messageId) { 
        LOG.info("Executing operation acknowledgeMessages");
        System.out.println(messageId);
        try {
            java.util.List<com.github.soap2jms.reader_common.MessageIdAndStatus> _return = new java.util.ArrayList<com.github.soap2jms.reader_common.MessageIdAndStatus>();
            com.github.soap2jms.reader_common.MessageIdAndStatus _returnVal1 = new com.github.soap2jms.reader_common.MessageIdAndStatus();
            java.util.List<java.lang.Object> _returnVal1MessageIdAndStatus = new java.util.ArrayList<java.lang.Object>();
            java.lang.Object _returnVal1MessageIdAndStatusVal1 = null;
            _returnVal1MessageIdAndStatus.add(_returnVal1MessageIdAndStatusVal1);
            _returnVal1.getMessageIdAndStatus().addAll(_returnVal1MessageIdAndStatus);
            _return.add(_returnVal1);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
